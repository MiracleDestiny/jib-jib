// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                  @id @default(autoincrement())
  username           String               @unique @db.VarChar(20)
  password           String               @db.VarChar(72)
  email              String               @unique @db.VarChar(255)
  verified           Boolean
  userRole           UserRoleEnum
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  profile            Profile?
  name               String               @db.VarChar(50)
  imageURL           String
  posts              Post[]
  followedBy         Follow[]             @relation("followedBy")
  following          Follow[]             @relation("following")
  likedPosts         User_Like_Post[]     @relation("likedBy")
  repostedPosts      User_Repost_Post[]   @relation("repostedBy")
  User_BookmarK_Post User_BookmarK_Post[] @relation("bookmarkedBy")
  sessions           Session[]
}

model Session {
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id          Int      @id @default(autoincrement())
  userID      Int      @unique
  bio         String?  @db.VarChar(100)
  location    String?  @db.VarChar(100)
  dateOfBirth DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userID], references: [id])
}

model Follow {
  followedID Int
  followerID Int
  following  User     @relation("following", fields: [followedID], references: [id])
  followedBy User     @relation("followedBy", fields: [followerID], references: [id])
  createdAt  DateTime @default(now())

  @@id([followedID, followerID])
}

model Post {
  id                 Int                  @id @default(autoincrement())
  authorID           Int
  parentPostID       Int?
  content            String?              @db.VarChar(500)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  author             User                 @relation(fields: [authorID], references: [id])
  parent             Post?                @relation("parentPost", fields: [parentPostID], references: [id])
  child              Post[]               @relation("parentPost")
  User_Like_Post     User_Like_Post[]     @relation("likedPost")
  User_Repost_Post   User_Repost_Post[]   @relation("repostedPost")
  User_BookmarK_Post User_BookmarK_Post[] @relation("bookmarkedPost")
  Post_Analytic      Post_Analytic?       @relation("postAnalytic")
  Post_Hashtag       Post_Hashtag[]
  images             Post_Image[]
}

model User_Like_Post {
  userID    Int
  postID    Int
  likedBy   User     @relation("likedBy", fields: [userID], references: [id])
  likedPost Post     @relation("likedPost", fields: [postID], references: [id])
  createdAt DateTime @default(now())

  @@id([userID, postID])
}

model User_Repost_Post {
  userID       Int
  postID       Int
  repostedBy   User     @relation("repostedBy", fields: [userID], references: [id])
  repostedPost Post     @relation("repostedPost", fields: [postID], references: [id])
  createdAt    DateTime @default(now())

  @@id([userID, postID])
}

model User_BookmarK_Post {
  userID         Int
  postID         Int
  bookmarkedBy   User     @relation("bookmarkedBy", fields: [userID], references: [id])
  bookmarkedPost Post     @relation("bookmarkedPost", fields: [postID], references: [id])
  createdAt      DateTime @default(now())

  @@id([userID, postID])
}

model Post_Analytic {
  id        Int
  likes     Int      @default(0)
  reposts   Int      @default(0)
  replies   Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  post      Post     @relation("postAnalytic", fields: [id], references: [id])

  @@unique([id])
}

model Post_Image {
  id       Int    @id @default(autoincrement())
  postID   Int
  orderID  Int    @default(0)
  imageUrl String
  post     Post   @relation(fields: [postID], references: [id])
}

model Hashtag {
  id           Int            @id() @default(autoincrement())
  hashtag      String         @unique @db.VarChar(50)
  createdAt    DateTime       @default(now())
  postHashtags Post_Hashtag[]
}

model Post_Hashtag {
  postID    Int
  hashtagID Int
  post      Post     @relation(fields: [postID], references: [id])
  hashtag   Hashtag  @relation(fields: [hashtagID], references: [id])
  createdAt DateTime @default(now())

  @@id([postID, hashtagID])
}

enum UserRoleEnum {
  USER
  ADMIN
}
